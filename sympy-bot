#! /usr/bin/env python

import json
from urllib2 import urlopen
import sys
from argparse import ArgumentParser
from tempfile import mkdtemp
import subprocess
import os
from os.path import expandvars
import urllib2
import base64
from urllib import urlencode
import time

from utils import (cmd, github_get_pull_request,
        github_authenticate, pastehtml_upload, reviews_sympy_org_upload,
        github_add_comment_to_pull_request, list_pull_requests, format_repo,
        get_interpreter_version_info, get_interpreter_exe, github_get_user_info)
from testrunner import run_tests
from url_templates import URLs

# Options that can be overridden by config file
default_testcommand = "setup.py test"
default_interpreter = "python"
default_interpreter3 = "python3"
default_protocol = "https"
default_repository = "sympy/sympy"
default_server = "http://reviews.sympy.org"

def main():
    parser = ArgumentParser(epilog="Run 'sympy-bot command -h' for additional help.")
    subparsers = parser.add_subparsers(title="command", dest="command")

    parser_review = subparsers.add_parser("review",
        description="Reviews specified pull requests.")
    parser_review.add_argument("nums", metavar="N", nargs="+",
        help="Numbers of pull requests to review. You can also specify 'all' "
        "or 'mergable' pull requests.")
    parser_review.add_argument("-n", "--no-upload", dest="upload",
        action="store_false", help="Do not upload the review to the server")
    parser_review.add_argument("-3", "--python3", action="store_true",
        help="Force use of Python 3.x, changes default interpreter to "
        "'python3'")
    parser_review.add_argument("--no-comment", dest="comment",
        action="store_false", help="Upload review but do not submit summary "
        "comment to pull request on GitHub")
    # Config file default
    parser_review.add_argument("-i", "--interpreter", type=str, help="Python "
        "interpreter used to run tests, default is 'python'")
    # Config file default
    parser_review.add_argument("-t", "--testcommand", type=str, help="Command, "
            "run as an argument of `python`,used to execute tests, allowing the "
            "use of sympy-bot on a subset of the tests, default is 'setup.py "
            "test', to run a command that is not an argument of `python`, add "
            "'-V;' to the beginning of the option, for example '-V; mycommand'")
    # Config file default
    parser_review.add_argument("-r", "--reference", type=str, help="Path to "
        "sympy repository, passed to 'git clone <sympy repo>', setting this "
        "speeds up sympy-bot and decreases network traffic")
    parser_review.add_argument("-m", "--master-commit", type=str,
        default="origin/master", help="Commit to use as master for merging, "
        "default is 'origin/master', which uses the current master, use "
        "'HEAD' to not merge")
    # Config file default
    parser_review.add_argument("-p", "--protocol", type=str, choices=["https",
        "git"], help="Protocol for communicating with GitHub")
    # Config file default
    parser_review.add_argument("-R", "--repository", type=str, help="GitHub "
        "repository used, allowing  sympy-bot to be used with other projects, "
        "default is 'sympy/sympy'")
    # Config file default
    parser_review.add_argument("-s", "--server", type=str,
        help="Server to upload results, default is http://reviews.sympy.org")

    parser_list = subparsers.add_parser('list')
    parser_list.add_argument("-n", "--numbers", action="store_true",
        help="List only the numbers of open pull requests, suitable for "
        "piping into 'xargs -L 1 sympy-bot review'")

    options = parser.parse_args()
    config = load_config_file()

    if options.reference is None:
        options.reference = config.get("reference")
    if options.testcommand is None:
        options.testcommand = config.get("testcommand", default_testcommand)
    if options.interpreter is None:
        if options.python3:
            options.interpreter = config.get("interpreter3", default_interpreter3)
        else:
            options.interpreter = config.get("interpreter", default_interpreter)
    if options.protocol is None:
        options.protocol = config.get("protocol", default_protocol)
    if options.repository is None:
        options.repository = config.get("repository", default_repository)
    if options.server is None:
        options.server = config.get("server", default_server)

    options.user = config.get("user")
    options.password = config.get("password")
    gh_user, gh_repo = options.repository.split("/")
    urls = URLs(user=gh_user, repo=gh_repo)

    if options.command == "list":
        list_pull_requests(urls, numbers_only=options.numbers)
    elif options.command == "review":
        if options.nums == "mergable":
            print "Reviewing all *mergeable* pull requests"
            print
            nonmergeable, mergeable = list_pull_requests(urls, numbers_only=True)
            nums = mergeable
        elif options.nums == "all":
            print "Reviewing *all* pull requests"
            print
            nonmergeable, mergeable = list_pull_requests(urls, numbers_only=True)
            nums = nonmergeable + mergeable
        else:
            # list of pull request numbers, convert it:
            nums = map(int, options.nums)
        if options.upload:
            username, password = github_authenticate(urls.api_url, options)
        else:
            username = password = None
        try:
            for n in nums:
                review(urls, n, options, username=username, password=password, \
                       proto=options.protocol
                      )
        except KeyboardInterrupt:
            print "\n> Quitting on signal SIGINT."
            sys.exit(1)

def formulate_review(report_url, report_status, xpassed, master_hash,
        branch_hash, user, config):
    user = user.get("login", None)

    if user:
        atuser = "@"+user+": "
    else:
        atuser = ""
    if report_status == "conflicts":
        summary = """:exclamation: There were merge conflicts; could not test the branch.

%sPlease rebase or merge your branch with master.  \
See the report for a list of the merge conflicts.""" % atuser
    elif report_status == "fetch":
        summary = """:x: Could not fetch the branch.

%sPlease run the sympy-bot tests again.""" % atuser
    elif report_status == "Failed":
        summary = """:red_circle: There were test failures.

%sPlease fix the test failures.""" % atuser
    elif report_status == "Passed":
        summary = """:eight_spoked_asterisk: All tests have passed."""
    else:
        raise ValueError("Unknown report_status")

    details  = get_platform_version(config.interpreter)
    if config.testcommand != default_testcommand:
        bold = "**"
    else:
        bold = ""
    details += """*Test command:* %s%s%s\n""" % (bold, config.testcommand, bold)
    details += """*master hash*: %s\n""" % master_hash
    details += """*branch hash*: %s\n""" % branch_hash

    report = """\
**SymPy Bot Summary:** %s

Test results html report: %s

%s
Automatic review by [SymPy Bot](https://github.com/sympy/sympy-bot).""" % \
    (summary, report_url, details,)

    return report

def load_config_file():
    conf_file = os.path.normpath('.sympy/sympy-bot.conf')
    conf_file = os.path.join('~', conf_file)
    conf_file = os.path.expanduser(conf_file)
    print conf_file

    if os.path.exists(conf_file):
        namespace = {}

        with open(conf_file) as f:
            try:
                exec f.read() in namespace
            except (SystemExit, KeyboardInterrupt):
                raise
            except:
                print "WARNING: The config file cannot be parsed."
                pass
            else:
                print "> Using %s" % conf_file
                return namespace

    return {}

def get_executable(interpreter):
    path = os.environ['PATH']
    paths = path.split(os.pathsep)
    interpreter_exe = None
    if os.name=="nt":
        return get_interpreter_exe(interpreter)
    if os.path.isfile(interpreter):
        return interpreter
    else:
        for p in paths:
            f = os.path.join(p, interpreter)
            if os.path.isfile(f):
                return f

def get_platform_version(interpreter):
    from os import getenv
    import platform
    code = 'import sys; print(getattr(sys, "maxint", None))'
    call = "%s -c '%s'" % (interpreter, code)
    size = cmd(call, capture=True)
    if size == 'None\n': #Python 3 doesn't have maxint
        code = 'import sys; print(sys.maxsize)'
        call = "%s -c '%s'" % (interpreter, code)
        size = cmd(call, capture=True)
    size = int(size)
    if size > 2**32:
        architecture = "64-bit"
    else:
        architecture = "32-bit"
    platfotm_system = platform.system()
    use_cache = getenv('SYMPY_USE_CACHE', 'yes').lower()
    executable = get_executable(interpreter)
    python_version = get_interpreter_version_info(interpreter)
    r  = "*Interpreter:*   %s  (%s)\n" % (executable, python_version)
    r += "*Architecture:* %s (%s)\n" % (platfotm_system, architecture)
    r += "*Cache:*        %s\n" % use_cache
    return r

def review(urls, n, config, **kwargs):
    # Make sure python3 is setup correctly
    # If set Python 3 interpreter with -i, be sure python3 is True
    username = kwargs.get("username", None)
    password = kwargs.get("password", None)
    proto = kwargs.get("proto", None) or default_protocol
    if get_interpreter_version_info(config.interpreter)[0] == '3':
        config.python3 = True
    # If set Python 2 interpreter with -i and set -3, raise error
    elif config.python3:
        raise ValueError("Python 2 interpreter passed with -3 option")

    tmpdir = mkdtemp(prefix="sympy-bot-tmp")
    print "> Working directory: %s" % tmpdir
    pull = github_get_pull_request(urls.single_pull_template, n)
    assert pull["number"] == n
    print "> Reviewing pull request #%d" % n
    repo = pull["head"]['repo']["html_url"]
    repo = repo.replace(default_protocol, proto) if proto != default_protocol else repo
    branch = pull["head"]["ref"]
    user = pull["head"]["user"]
    user_info = github_get_user_info(urls.user_info_template, username)
    author = "\"%s\" <%s>" % (user_info.get("name", "unknown"),
                              user_info.get("email", ""))
    print "> Pull request info:"
    print unicode(">     Author: %s" % author).encode('utf8')
    print ">     Repository: %s" % repo
    print ">     Branch: %s" % branch

    print format_repo("> Cloning {repo} master", config.repository)

    if config.reference:
        reference = os.path.abspath(os.path.expanduser(os.path.expandvars(config.reference)))
        cmd(format_repo("cd %s && git clone --reference %s git://github.com/{repo}.git", config.repository) % (tmpdir, reference))
    else:
        cmd(format_repo("cd %s && git clone git://github.com/{repo}.git",
            config.repository) % tmpdir)

    print "> Testing..."
    result = run_tests(format_repo("https://github.com/{repo}.git",
        config.repository),
            repo, branch, tmpdir + "/sympy", config.testcommand,
            config.interpreter, config.python3, config.master_commit)
    if result["result"] == "error":
        print "There was an error. Report not uploaded."
        sys.exit(1)
    print "Done."
    print
    log_file = os.path.join("%s" % tmpdir, "out", "log")
    print "View log at: %s" % log_file
    log = result["log"]
    report_status = result["result"]
    xpassed = result["xpassed"]
    bot_file = os.path.realpath(os.path.abspath(__file__))
    bot_dir = os.path.dirname(bot_file)

    master_hash = result["master_hash"]
    branch_hash = result["branch_hash"]

    if os.name=='nt':
        mkdir_command = "mkdir"
    else:
        mkdir_command = "mkdir -p"
    cmd("%s %s" % (mkdir_command, os.path.join(tmpdir, "out")))
    open(log_file, "w").write(log)
    if config.upload:
        print "> Uploading test results"
        url_base = config.server
        data = {
                "num": n,
                "result": report_status,
                "interpreter": config.interpreter,
                "testcommand": config.testcommand,
                "log": log,
                "master_hash": master_hash,
                "branch_hash": branch_hash,
                }
        report_url = reviews_sympy_org_upload(data, url_base)
        print "> Uploaded report at: %s" % report_url
        review = formulate_review(report_url, report_status,
                xpassed, master_hash, branch_hash, user, config)
    else:
        review = formulate_review("(report was not uploaded)",
                report_status, xpassed, master_hash, branch_hash, user, config)
    print "> Review:"
    print review
    if config.upload and config.comment:
        print "> Uploading the review to the GitHub pull request ..."
        github_add_comment_to_pull_request(urls.issue_comment_template, \
                                           username, password, n, review
                                          )
        print ">     Done."
        print format_repo("> Check the results: https://github.com/{repo}/pull/%d", config.repository) % n
    print "> Merged pull request available in: %s" % tmpdir

if __name__ == "__main__":
    main()
    sys.exit(0)
